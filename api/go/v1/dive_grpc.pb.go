// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: dive/v1/dive.proto

package diveContracts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiveServiceClient is the client API for DiveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiveServiceClient interface {
	Dive(ctx context.Context, in *DiveRequest, opts ...grpc.CallOption) (*DiveResponse, error)
}

type diveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiveServiceClient(cc grpc.ClientConnInterface) DiveServiceClient {
	return &diveServiceClient{cc}
}

func (c *diveServiceClient) Dive(ctx context.Context, in *DiveRequest, opts ...grpc.CallOption) (*DiveResponse, error) {
	out := new(DiveResponse)
	err := c.cc.Invoke(ctx, "/dive.v1.DiveService/Dive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiveServiceServer is the server API for DiveService service.
// All implementations must embed UnimplementedDiveServiceServer
// for forward compatibility
type DiveServiceServer interface {
	Dive(context.Context, *DiveRequest) (*DiveResponse, error)
	mustEmbedUnimplementedDiveServiceServer()
}

// UnimplementedDiveServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDiveServiceServer struct {
}

func (UnimplementedDiveServiceServer) Dive(context.Context, *DiveRequest) (*DiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dive not implemented")
}
func (UnimplementedDiveServiceServer) mustEmbedUnimplementedDiveServiceServer() {}

// UnsafeDiveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiveServiceServer will
// result in compilation errors.
type UnsafeDiveServiceServer interface {
	mustEmbedUnimplementedDiveServiceServer()
}

func RegisterDiveServiceServer(s grpc.ServiceRegistrar, srv DiveServiceServer) {
	s.RegisterService(&DiveService_ServiceDesc, srv)
}

func _DiveService_Dive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiveServiceServer).Dive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dive.v1.DiveService/Dive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiveServiceServer).Dive(ctx, req.(*DiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DiveService_ServiceDesc is the grpc.ServiceDesc for DiveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dive.v1.DiveService",
	HandlerType: (*DiveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Dive",
			Handler:    _DiveService_Dive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dive/v1/dive.proto",
}
